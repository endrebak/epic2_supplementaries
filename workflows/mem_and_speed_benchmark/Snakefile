"""Measure difference in memory usage for SICER and epic.

Use H3K27me3 data in early S-phase (0, 3, 15, 18)
"""

"""
Old results, before using -sbw:

         Software  Files     Bigwig    MaxRSSGB Hours Minutes Seconds
6    epic_results     0h     bigwig   34.735984     0       6   12.52
0   sicer_results     0h     bigwig   19.247248     0      37   00.74
7    epic_results     0h  no_bigwig   11.809360     0       3   06.80
1   sicer_results     0h  no_bigwig   19.248000     0      20   03.48
8    epic_results    all     bigwig  116.491936     0      34   54.94
2   sicer_results    all     bigwig   27.026208     5      02      16
9    epic_results    all  no_bigwig   55.881088     0      26   42.92
3   sicer_results    all  no_bigwig   27.026480     4      27      07
10   epic_results  early     bigwig   62.195264     0      17   24.71
4   sicer_results  early     bigwig   25.626192     2      32      35
11   epic_results  early  no_bigwig   29.338608     0      10   27.37
5   sicer_results  early  no_bigwig   25.625936     2      08      50
"""

__author__ = "Endre Bakken Stovner https://github.com/endrebak/"
__license__ = "MIT"

from glob import glob
from os import environ
from subprocess import check_output

import pandas as pd

if not environ.get("TMUX", ""):
    raise Exception("Not using TMUX!")


shell.executable("bash")

prefix = "/mnt/scratch/projects/epic_bencmarks"


chip_data = ['/mnt/scratch/projects/epipp/data/bam/Exp1_0h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp1_12h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp1_15h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp1_18h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp1_21h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp1_24h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp1_3h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp1_6h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp1_9h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp1_Unsynchronized_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp2_0h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp2_12h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp2_15h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp2_18h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp2_21h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp2_24h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp2_3h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp2_6h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp2_9h_H3K27me3.bed',
             '/mnt/scratch/projects/epipp/data/bam/Exp2_Unsynchronized_H3K27me3.bed']


input_data = ['/mnt/scratch/projects/epipp/data/bam/Exp1_0h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp1_12h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp1_15h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp1_18h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp1_21h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp1_24h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp1_3h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp1_6h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp1_9h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp1_Unsynchronized_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp2_0h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp2_12h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp2_15h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp2_18h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp2_21h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp2_24h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp2_3h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp2_6h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp2_9h_Input.bed',
              '/mnt/scratch/projects/epipp/data/bam/Exp2_Unsynchronized_Input.bed']


# chip_data = ["/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_0h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_12h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_15h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_18h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_21h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_24h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_3h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_6h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_9h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_0h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_12h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_15h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_18h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_21h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_24h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_3h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_6h_H3K27me3.bed",
#              "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_9h_H3K27me3.bed"]

# input_data = ["/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_0h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_12h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_15h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_18h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_21h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_24h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_3h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_6h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_9h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_0h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_12h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_15h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_18h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_21h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_24h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_3h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_6h_Input.bed",
#               "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_9h_Input.bed"]

chip_data_early = [f for f in chip_data if re.search("0h|3h|15h|18h", f)]
input_data_early = [f for f in input_data if re.search("0h|3h|15h|18h", f)]

chip_data_0h = [f for f in chip_data if "0h" in f]
input_data_0h = [f for f in input_data if "0h" in f]


infiles = {("chip", "early"): chip_data_early, ("chip", "all"): chip_data, ("chip", "0h"): chip_data_0h,
           ("input", "early"): input_data_early, ("input", "all"): input_data, ("input", "0h"): input_data_0h}


rule all:
    input:
        "{prefix}/data/speed_epic_vs_SICER_memory.pdf".format(prefix=prefix),
        expand("{prefix}/data/epic_results/{subset}/{bigwig}/memory.csv", subset="0h all early".split(), bigwig="no_bigwig", prefix=prefix),
        expand("{prefix}/data/macs2_results/{subset}/{bigwig}/memory.csv", subset="0h all early".split(), bigwig="no_bigwig", prefix=prefix),
        # "{prefix}/data/file_sizes.csv".format(prefix=prefix),
        # "{prefix}/data/memory_usage.csv".format(prefix=prefix),
        # "{prefix}/data/speed_epic_vs_SICER.csv".format(prefix=prefix),
        expand("{prefix}/data/speed_epic_vs_SICER_{bigwig}.pdf", prefix=prefix, bigwig="bigwig no_bigwig".split()),
        expand("{prefix}/data/sicer_results/{subset}/{bigwig}/{subset}_chip-W200-G600-islands-summary-FDR1.0",
               bigwig="bigwig no_bigwig".split(), subset="0h all early".split(), prefix=prefix),
        # expand("{prefix}/data/epic_results/{subset}/{bigwig}/fdr_list.csv",
        #        subset="0h all early".split(), bigwig="bigwig no_bigwig".split())


rule run_epic:
    input:
        chip = lambda w: infiles["chip", w.subset],
        input = lambda w: infiles["input", w.subset]
    output:
        result = "{prefix}/data/epic_results/{subset}/{bigwig}/fdr_list.csv",
        memory = "{prefix}/data/epic_results/{subset}/{bigwig}/memory.csv"
    resources:
        instances = 1
    threads: 48
    run:
        # chip = [f for f in input if "Input" not in f]
        # input = [f for f in input if "H3K27me3_Input" in f]

        # overlaps_chip_input = set(chip).intersection(input)


        # assert not overlaps_chip_input, "Overlapping files in chip and input!"

        if wildcards.bigwig == "bigwig":
            shell("/usr/bin/time -v -o {output.memory} epic -cpu 48 -bw data/epic_results -t {input.chip} -c {input.input} > {output.result}")
        else:
            shell("/usr/bin/time -v -o {output.memory} epic -cpu 48 -t {input.chip} -c {input.input} > {output.result}")


from os.path import expanduser
python2_bin = expanduser("/mnt/work/endrebak/software/anaconda/envs/py27/bin/")
macs2_bin = "/mnt/work/endrebak/software/anaconda/envs/py27/bin/macs2"
rule run_macs2:
    input:
        chip = lambda w: infiles["chip", w.subset],
        input = lambda w: infiles["input", w.subset]
    output:
        memory = "{prefix}/data/macs2_results/{subset}/{bigwig}/memory.csv"
    resources:
        instances = 1
    run:
        chip = [f for f in input if "H3K27me3" in f]
        input = [f for f in input if "Input" in f]

        if wildcards.bigwig == "bigwig":
            raise Exception("Bigwig/macs not applicable")
        else:
            shell("/usr/bin/time -v -o {output.memory} {macs2_bin} callpeak --extsize 150 --nomodel --broad --broad-cutoff 0.05 --gsize hs -q 0.05 -t {chip} -c {input} -n {prefix}/data/macs2_results/{wildcards.subset}/{wildcards.bigwig}/")


rule concat_files_for_sicer:
    input:
        chip = lambda w: infiles["chip", w.subset],
        input = lambda w: infiles["input", w.subset]
    output:
        chip = temp("{prefix}/data/{subset}_chip.bed"),
        input = temp("{prefix}/data/{subset}_input.bed")
    resources:
        instances = 1
    run:
        chip = [f for f in input if "H3K27me3" in f]
        input = [f for f in input if "Input" in f]

        shell("cat {chip} > {output.chip}")
        shell("cat {input} > {output.input}")


rule run_sicer:
    input:
        chip = "{prefix}/data/{subset}_chip.bed",
        input = "{prefix}/data/{subset}_input.bed"
    output:
        result = "{prefix}/data/sicer_results/{subset}/{bigwig}/{subset}_chip-W200-G600-islands-summary-FDR1.0",
        memory = "{prefix}/data/sicer_results/{subset}/{bigwig}/memory.csv",
    resources:
        instances = 1
    run:
        pwd = check_output("echo $(dirname $(dirname `pwd`))", shell=True).decode().strip()

        # how to solve python2 requirements?

        if wildcards.bigwig == "bigwig":
            # print("/usr/bin/time -v -o {output.memory} sh ../../SICER/SICER_full.sh {prefix}/data/ {wildcards.subset}_chip.bed {wildcards.subset}_input.bed {prefix}/data/sicer_results/{wildcards.subset}/{wildcards.bigwig} hg38 1 200 150 0.85 600 1.0 {pwd}".format(**vars()))
            shell("/usr/bin/time -v -o {output.memory} sh ../../SICER/SICER_full.sh {prefix}/data/ {wildcards.subset}_chip.bed {wildcards.subset}_input.bed {prefix}/data/sicer_results/{wildcards.subset}/{wildcards.bigwig} hg38 1 200 150 0.85 600 1.0 {pwd}")
        else:
            # print("/usr/bin/time -v -o {output.memory} sh ../../SICER/SICER.sh {prefix}/data/ {wildcards.subset}_chip.bed {wildcards.subset}_input.bed {prefix}/data/sicer_results/{wildcards.subset}/{wildcards.bigwig} hg38 1 200 150 0.85 600 1.0 {pwd}".format(**vars()))
            shell("/usr/bin/time -v -o {output.memory} sh ../../SICER/SICER.sh {prefix}/data/ {wildcards.subset}_chip.bed {wildcards.subset}_input.bed {prefix}/data/sicer_results/{wildcards.subset}/{wildcards.bigwig} hg38 1 200 150 0.85 600 1.0 {pwd}")


bigwig = ["bigwig", "no_bigwig"] #
rule memory_comparisons:
    input:
        epic = expand("{prefix}/data/epic_results/{subset}/{bigwig}/memory.csv",
                       subset="0h all early".split(), bigwig=bigwig, prefix=prefix),
        sicer = expand("{prefix}/data/sicer_results/{subset}/{bigwig}/memory.csv",
                       subset="0h all early".split(), bigwig=bigwig, prefix=prefix),
        macs2 = expand("{prefix}/data/macs2_results/{subset}/{bigwig}/memory.csv",
                       subset="0h all early".split(), bigwig="no_bigwig", prefix=prefix),
    output:
        "{prefix}/data/memory_usage.csv"
    run:
        results = []
        for f in input.sicer + input.epic + input.macs2:
            print(f)
            software, files, bigwig = f.split("/")[-4:-1]

            for line in open(f):

                if "Maximum resident set size (kbytes):" in line:
                    gb = int(line.split(": ")[-1]) / 1e6

                elif "Elapsed (wall clock) time" in line:
                    time = line.split(": ")[-1].strip()
                    time_split = time.split(":")

                    if len(time_split) == 2:
                        hours, minutes, seconds = 0, time_split[0], time_split[1]
                    elif len(time_split) == 3:
                        hours, minutes, seconds = time_split
                    minutes = int(hours) * 60 + int(minutes)

            results.append({"Software": software, "Files": files,
                            "Bigwig": bigwig, "MaxRSSGB": gb,
                            "Minutes": minutes})

        results = pd.DataFrame.from_dict(results)[
            ["Software", "Files", "Bigwig", "MaxRSSGB", "Minutes"]]

        results = results.sort_values(["Files", "Bigwig", "Software"])

        print(results)

        results.to_csv(output[0], sep=" ", index=False)


rule get_file_sizes:
    output:
        "{prefix}/data/file_sizes.csv"
    run:
        all_sum = 0
        for f in chip_data + input_data:
            all_sum += float(os.stat(f).st_size/(1024*1024*1024))

        early_sum = 0
        for f in chip_data_early + input_data_early:
            early_sum += float(os.stat(f).st_size/(1024*1024*1024))


        h0_sum = 0
        for f in chip_data_0h + input_data_0h:
            h0_sum += float(os.stat(f).st_size/(1024*1024*1024))

        df = pd.concat([pd.Series([h0_sum, early_sum, all_sum]), pd.Series(["0h", "early", "all"])], axis=1)

        df.columns = ["Size", "Files"]
        df.to_csv(output[0], sep=" ", index=False)


rule graph_speed_epic_vs_SICER:
    input:
        memory = "{prefix}/data/memory_usage.csv", file_size = "{prefix}/data/file_sizes.csv"
    output:
        "{prefix}/data/speed_epic_vs_SICER_{bigwig}.csv"
    run:
        mem_df = pd.read_table(input.memory, sep=" ")
        print(mem_df)
        mem_df = mem_df.loc[mem_df.Bigwig == wildcards.bigwig].drop("Bigwig", axis=1)
        print(mem_df)

        if wildcards.bigwig == "bigwig":
            print(mem_df)
            mem_df = mem_df.loc[mem_df.Software != "macs2"]
            print(mem_df)

        size_df = pd.read_table(input.file_size, sep=" ")

        df = mem_df.merge(size_df, how="left", on="Files")

        df.loc[:, "Software"] = df.Software.str.replace("epic_results", "epic").replace("sicer_results", "SICER").replace("macs2_results", "macs2")

        df.to_csv(output[0], sep=" ")


rule graph_epic_and_sicer_speeds_together:
    input:
        "{prefix}/data/speed_epic_vs_SICER_{bigwig}.csv"
    output:
        "{prefix}/data/speed_epic_vs_SICER_{bigwig}.pdf"
    script:
        "scripts/epic_speed.R"

    # run:
    #     command = """
    #     library(ggplot2)

    #     df = read.table("{input}", sep=" ", header=1)
    #     df$Size = round(df$Size, 2)

    #     linear = ggplot(df, aes(x=Size, y=Minutes)) + geom_line(aes(colour=Software)) + geom_point(aes(colour=Software)) + xlab("Size of data in GB.") + ylab("Running time in minutes.")
    #     ggsave("{output[0]}")"""

    #     print(command)
    #     R(command)


# rule graph_epic_and_sicer_memory_usage_together:
#     input:
#         "{prefix}/data/speed_epic_vs_SICER.csv"
#     output:
#         "{prefix}/data/speed_epic_vs_SICER_memory.pdf"
#     run:
#         command = """
#         library(ggplot2)

#         df = read.table("{input}", sep=" ", header=1)
#         df$Size = round(df$Size, 2)

#         linear = ggplot(df, aes(x=Size, y=MaxRSSGB)) + geom_line(aes(colour=Software)) + geom_point(aes(colour=Software)) + xlab("Size of data in GB.") + ylab("Memory usage.")
#         ggsave("{output[0]}")"""

#         print(command)
#         R(command)
