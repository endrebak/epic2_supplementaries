"""Measure difference in memory usage for SICER and epic.

Use H3K27me3 data in early S-phase (0, 3, 15, 18)
"""

__author__ = "Endre Bakken Stovner https://github.com/endrebak/"
__license__ = "MIT"

from glob import glob
from os import environ
from subprocess import check_output

import pandas as pd

if not environ.get("TMUX", ""):
    raise Exception("Not using TMUX!")

shell.executable("bash")

chip_data = ["/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_0h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_12h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_15h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_18h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_21h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_24h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_3h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_6h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp1_9h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_0h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_12h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_15h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_18h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_21h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_24h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_3h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_6h_H3K27me3.bed",
             "/local/home/endrebak/genomes/epipp_chip/hg38/H3K27me3/Exp2_9h_H3K27me3.bed"]

input_data = ["/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_0h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_12h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_15h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_18h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_21h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_24h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_3h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_6h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp1_9h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_0h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_12h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_15h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_18h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_21h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_24h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_3h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_6h_Input.bed",
              "/local/home/endrebak/genomes/epipp_chip/hg38/Input/Exp2_9h_Input.bed"]

chip_data_early = [f for f in chip_data if re.search("0h|3h|15h|18h", f)]
input_data_early = [f for f in input_data if re.search("0h|3h|15h|18h", f)]

chip_data_0h = [f for f in chip_data if "0h" in f]
input_data_0h = [f for f in input_data if "0h" in f]


infiles = {("chip", "early"): chip_data_early, ("chip", "all"): chip_data, ("chip", "0h"): chip_data_0h,
           ("input", "early"): input_data_early, ("input", "all"): input_data, ("input", "0h"): input_data_0h}


rule all:
    input:
        "data/memory_usage.csv",
        expand("data/sicer_results/{subset}/{bigwig}/{subset}_chip-W200-G600-islands-summary-FDR1.0",
               bigwig="bigwig no_bigwig".split(), subset="0h all early".split()),
        # expand("data/epic_results/{subset}/{bigwig}/fdr_list.csv",
        #        subset="0h all early".split(), bigwig="bigwig no_bigwig".split())


rule run_epic:
    input:
        chip = lambda w: infiles["chip", w.subset],
        input = lambda w: infiles["input", w.subset]
    output:
        result = "data/epic_results/{subset}/{bigwig}/fdr_list.csv",
        memory = "data/epic_results/{subset}/{bigwig}/memory.csv"
    resources:
        instances = 1
    run:
        chip = [f for f in input if "H3K27me3" in f]
        input = [f for f in input if "Input" in f]

        if wildcards.bigwig == "bigwig":
            shell("/usr/bin/time -v -o {output.memory} epic -cpu 25 -bw data/epic_results -t {chip} -c {input} > {output.result}")
        else:
            shell("/usr/bin/time -v -o {output.memory} epic -cpu 25 -t {chip} -c {input} > {output.result}")


rule concat_files_for_sicer:
    input:
        chip = lambda w: infiles["chip", w.subset],
        input = lambda w: infiles["input", w.subset]
    output:
        chip = temp("data/{subset}_chip.bed"),
        input = temp("data/{subset}_input.bed")
    resources:
        instances = 1
    run:
        print(input)
        chip = [f for f in input if "H3K27me3" in f]
        input = [f for f in input if "Input" in f]

        shell("cat {chip} > {output.chip}")
        shell("cat {input} > {output.input}")


rule run_sicer:
    input:
        chip = "data/{subset}_chip.bed",
        input = "data/{subset}_input.bed"
    output:
        result = "data/sicer_results/{subset}/{bigwig}/{subset}_chip-W200-G600-islands-summary-FDR1.0",
        memory = "data/sicer_results/{subset}/{bigwig}/memory.csv",
    resources:
        instances = 1
    run:
        pwd = check_output("echo $(dirname $(dirname `pwd`))", shell=True).decode().strip()

        if wildcards.bigwig == "bigwig":
            print("/usr/bin/time -v -o {output.memory} sh ../../SICER/SICER_full.sh data/ {wildcards.subset}_chip.bed {wildcards.subset}_input.bed data/sicer_results/{wildcards.subset}/{wildcards.bigwig} hg38 1 200 150 0.85 600 1.0 {pwd}".format(**vars()))
            shell("/usr/bin/time -v -o {output.memory} sh ../../SICER/SICER_full.sh data/ {wildcards.subset}_chip.bed {wildcards.subset}_input.bed data/sicer_results/{wildcards.subset}/{wildcards.bigwig} hg38 1 200 150 0.85 600 1.0 {pwd}")
        else:
            print("/usr/bin/time -v -o {output.memory} sh ../../SICER/SICER.sh data/ {wildcards.subset}_chip.bed {wildcards.subset}_input.bed data/sicer_results/{wildcards.subset}/{wildcards.bigwig} hg38 1 200 150 0.85 600 1.0 {pwd}".format(**vars()))
            shell("/usr/bin/time -v -o {output.memory} sh ../../SICER/SICER.sh data/ {wildcards.subset}_chip.bed {wildcards.subset}_input.bed data/sicer_results/{wildcards.subset}/{wildcards.bigwig} hg38 1 200 150 0.85 600 1.0 {pwd}")


rule memory_comparisons:
    input:
        epic = expand("data/epic_results/{subset}/{bigwig}/memory.csv",
                       subset="0h all early".split(), bigwig="bigwig no_bigwig".split()),
        sicer = expand("data/sicer_results/{subset}/{bigwig}/memory.csv",
                       subset="0h all early".split(), bigwig="bigwig no_bigwig".split())
    output:
        "data/memory_usage.csv"
    run:
        results = []
        for f in input.sicer + input.epic:
            print(f)
            software, files, bigwig = f.split("/")[1:-1]

            for line in open(f):

                if "Maximum resident set size (kbytes):" in line:
                    gb = int(line.split(": ")[-1]) / 1e6

                elif "Elapsed (wall clock) time" in line:
                    time = line.split(": ")[-1].strip()
                    time_split = time.split(":")

                    if len(time_split) == 2:
                        hours, minutes, seconds = 0, time_split[0], time_split[1]
                    elif len(time_split) == 3:
                        hours, minutes, seconds = time_split

            results.append({"Software": software, "Files": files,
                            "Bigwig": bigwig, "MaxRSSGB": gb, "Hours": hours,
                            "Minutes": minutes, "Seconds": seconds})

        results = pd.DataFrame.from_dict(results)[
            ["Software", "Files", "Bigwig", "MaxRSSGB", "Hours", "Minutes",
             "Seconds"]]

        results = results.sort_values(["Files", "Bigwig", "Software"])

        print(results)
